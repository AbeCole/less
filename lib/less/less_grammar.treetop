grammar LessGrammar
  rule primary
    (css_rule / variable_declaration)+ {
      def build(engine)
        elements.each {|e| e.build(engine) }
      end
    }
  end
  
  rule variable_declaration
    whitespace "@" variable_name ":" whitespace declaration_value ";" whitespace {
      def build(engine)
        engine.variables[variable_name.text_value] = declaration_value.text_value
      end
    }
  end
  
  rule variable_reference
    "@" variable_name (whitespace variable_operation)?
  end
  
  rule variable_operation
    operand whitespace number
  end
  
  rule variable_name
    [a-zA-Z0-9\-_]+
  end
  
  rule css_rule
    whitespace selectors rule_block whitespace {
      def build(engine)
        rule_block.build(engine)
      end
    }
  end
  
  rule selectors
    [#\.a-zA-Z0-9<>\[\]='"~\|,: ]+
  end
  
  rule rule_block
    "{" content:(rule_block_content / nothing) "}" {
      def build(engine)
        content.build(engine)
      end
    }
  end
  
  rule rule_block_content
    (css_rule / declaration / " ")+ {
      def build(engine)
        if elements # Skipping empty rules (p { })
          engine.rules << Less::Engine::Rule.new(parent.parent.selectors.text_value)
          elements.each {|e| e.build(engine) if e.respond_to?(:build) }
        end
      end
    }
  end
  
  rule declaration
    whitespace (css_declaration / mixin) whitespace
  end
  
  rule css_declaration
    declaration_key ":" whitespace (variable_reference / declaration_value) ";"
  end
  
  rule mixin
    "." [a-zA-Z0-9\-_]+ ";"
  end
  
  rule declaration_key
    [a-z\-]+
  end
  
  rule operand
    addition / subtraction / multiplication / divition
  end
  
  rule addition
    "*"
  end
  
  rule subtraction
    "-"
  end
  
  rule multiplication
    "*"
  end
  
  rule divition
    "/"
  end
  
  rule number
    [0-9]+
  end
  
  rule declaration_value
    [^;]+
  end
  
  rule whitespace
    [ ]*
  end
  
  rule nothing
    "" {
      def build(engine)
        # Do absolutely nothing!
      end
    }
  end
end