grammar Less
  rule primary
    (declaration / ruleset)+ <Builder> { 
      def build(env)
        super
      end
    } / declaration+ <Builder>
  end
  
  #
  # div, .class, body > p
  #
  rule ruleset
    ws (selector s ',' ws ruleset <Builder> / selector) ws <Builder>
  end
  
  #
  # div > p a {...}
  #
  rule selector
    select element s selector <Builder> {
      def build env
        env.rules << Less::Element.new(element.text_value, select.text_value)
        super env.elements.last
      end
    } / select element ws "{" primary "}" ws <Builder> {
      def build env        
        env.rules << Less::Element.new(element.text_value, select.text_value)
        super env.elements.last
      end
    } / select element s ';' {
      def build env
        env << Less::Mixin.new(element.text_value)
      end      
    } / select element
  end
  
  #
  # div | .class | #id | *
  #
  rule element
    ([#.]? [-a-zA-Z0-9_\[\]|~="']+ / '*')
  end
  
  rule select
    (s [:+>] s / [ ]+)?
  end
  
  #
  # @my-var: 12px;
  # height: 100%;
  #
  rule declaration
    ws name:(property / variable) s ':' s value s ';' ws {
      def build env
        env << { name.text_value => value.text_value }
      end
    }
  end
  
  rule value
    [^\n\{\};]+
  end
  
  rule property
    [-a-z0-9_]+
  end
  
  rule variable
    '@' property
  end
  
  # Space
  rule s
    [ ]*
  end
  
  # Whitespace
  rule ws
    [\n ]*
  end
end
